# Protocol Simulator for E2E Testing
# Simulates Sei DeFi protocols for testing purposes

FROM node:18-alpine

RUN apk add --no-cache curl bash

WORKDIR /app

# Install ganache-cli for blockchain simulation
RUN npm install -g ganache-cli

# Copy simulator configuration
COPY test/e2e/fixtures/simulator-config.json /app/config.json

# Create simulator script
RUN cat > /app/simulator.js << 'EOF'
const { spawn } = require('child_process');
const fs = require('fs');

// Read configuration
const config = JSON.parse(fs.readFileSync('/app/config.json', 'utf8'));

// Start ganache with Sei network simulation
const ganacheArgs = [
  '--host', '0.0.0.0',
  '--port', '8545',
  '--chainId', process.env.CHAIN_ID || '1329',
  '--blockTime', process.env.BLOCK_TIME || '1000',
  '--accounts', process.env.ACCOUNTS || '10',
  '--mnemonic', process.env.MNEMONIC || 'test test test test test test test test test test test junk',
  '--gasLimit', '0x1fffffffffffff',
  '--gasPrice', '0x01',
  '--defaultBalanceEther', '1000000',
  '--unlock', '0,1,2,3,4,5,6,7,8,9',
  '--networkId', process.env.CHAIN_ID || '1329'
];

if (process.env.FORK_URL) {
  ganacheArgs.push('--fork', process.env.FORK_URL);
}

if (process.env.ENABLE_LOGGING === 'true') {
  ganacheArgs.push('--verbose');
}

console.log('Starting Protocol Simulator...');
console.log('Arguments:', ganacheArgs.join(' '));

const ganache = spawn('ganache-cli', ganacheArgs);

ganache.stdout.on('data', (data) => {
  console.log(`[SIMULATOR] ${data}`);
});

ganache.stderr.on('data', (data) => {
  console.error(`[SIMULATOR ERROR] ${data}`);
});

ganache.on('close', (code) => {
  console.log(`[SIMULATOR] Process exited with code ${code}`);
});

// Health check endpoint
const http = require('http');
const server = http.createServer((req, res) => {
  if (req.url === '/health') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ status: 'healthy', timestamp: new Date().toISOString() }));
  } else {
    res.writeHead(404);
    res.end('Not Found');
  }
});

server.listen(8080, () => {
  console.log('Health check server listening on port 8080');
});
EOF

# Create simulator configuration
RUN cat > /app/config.json << 'EOF'
{
  "network": "sei-testnet",
  "chainId": 1329,
  "protocols": {
    "YeiFinance": {
      "enabled": true,
      "contractAddress": "0x1234567890123456789012345678901234567890",
      "features": ["lending", "borrowing", "staking"]
    },
    "DragonSwap": {
      "enabled": true,
      "contractAddress": "0x2345678901234567890123456789012345678901",
      "features": ["swapping", "liquidity", "farming"]
    },
    "Takara": {
      "enabled": true,
      "contractAddress": "0x3456789012345678901234567890123456789012",
      "features": ["lending", "borrowing", "yield_optimization"]
    }
  },
  "assets": {
    "USDC": {
      "address": "0x4567890123456789012345678901234567890123",
      "decimals": 6,
      "symbol": "USDC"
    },
    "SEI": {
      "address": "0x5678901234567890123456789012345678901234",
      "decimals": 18,
      "symbol": "SEI"
    },
    "ETH": {
      "address": "0x6789012345678901234567890123456789012345",
      "decimals": 18,
      "symbol": "ETH"
    }
  }
}
EOF

# Health check script
RUN cat > /app/health-check.sh << 'EOF'
#!/bin/bash
curl -f http://localhost:8080/health || exit 1
EOF

RUN chmod +x /app/health-check.sh

EXPOSE 8545 8080

CMD ["node", "/app/simulator.js"]

HEALTHCHECK --interval=10s --timeout=5s --start-period=20s --retries=5 \
  CMD /app/health-check.sh