# Docker Compose configuration for production environment
# Optimized for performance, security, and scalability

version: '3.8'

services:
  # ============================================
  # Backend API Service (Production)
  # ============================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: sei-portfolio-api:latest
    container_name: sei-portfolio-api-prod
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SEI_RPC_URL=${SEI_RPC_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - sei-portfolio-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # Redis Cache & Session Store (Production)
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: sei-portfolio-redis-prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server
      --requirepass "${REDIS_PASSWORD}"
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - sei-portfolio-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # Nginx Reverse Proxy with SSL
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: sei-portfolio-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN=${DOMAIN:-localhost}
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
    networks:
      - sei-portfolio-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # Log Aggregation (Optional)
  # ============================================
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: sei-portfolio-fluentd-prod
    volumes:
      - ./docker/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/app:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - sei-portfolio-network
    restart: always
    profiles:
      - logging

  # ============================================
  # Monitoring (Optional)
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: sei-portfolio-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - sei-portfolio-network
    restart: always
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: sei-portfolio-grafana-prod
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - sei-portfolio-network
    restart: always
    profiles:
      - monitoring

# ============================================
# Networks
# ============================================
networks:
  sei-portfolio-network:
    driver: bridge
    name: sei-portfolio-prod

# ============================================
# Volumes
# ============================================
volumes:
  redis-data:
    name: sei-portfolio-redis-data-prod
    driver: local
  prometheus-data:
    name: sei-portfolio-prometheus-data-prod
    driver: local
  grafana-data:
    name: sei-portfolio-grafana-data-prod
    driver: local
