# Test-specific Dockerfile for running tests in isolation
# Optimized for fast builds and comprehensive test execution

ARG NODE_VERSION=20-alpine
FROM node:${NODE_VERSION} AS test-base

# Install system dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache \
    git \
    python3 \
    make \
    g++ \
    bash \
    curl \
    && rm -rf /var/cache/apk/*

# Create app directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies)
RUN npm ci --no-audit --no-fund && \
    npm cache clean --force

# Copy application source
COPY tsconfig.json ./
COPY jest.config.js ./
COPY src ./src
COPY tests ./tests

# Create directories for test outputs
RUN mkdir -p coverage test-results logs && \
    chmod -R 777 coverage test-results logs

# Set environment for tests
ENV NODE_ENV=test
ENV CI=true
ENV FORCE_COLOR=1

# Health check for container readiness
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "console.log('Test container ready')" || exit 1

# Default command runs all tests
CMD ["npm", "test"]

# ============================================
# Unit test stage
# ============================================
FROM test-base AS unit-tests
CMD ["npm", "run", "test:unit"]

# ============================================
# Integration test stage
# ============================================
FROM test-base AS integration-tests
CMD ["npm", "run", "test:integration"]

# ============================================
# Property test stage
# ============================================
FROM test-base AS property-tests
CMD ["npm", "run", "test:property"]

# ============================================
# Coverage stage
# ============================================
FROM test-base AS coverage
CMD ["npm", "run", "test:coverage"]

# ============================================
# Development test stage (with watch mode)
# ============================================
FROM test-base AS test-dev

# Install additional dev tools
RUN apk add --no-cache \
    inotify-tools \
    vim

# Enable watch mode
CMD ["npm", "run", "test:watch"]

# ============================================
# CI/CD optimized stage
# ============================================
FROM test-base AS ci

# Add CI-specific configurations
ENV JEST_JUNIT_OUTPUT_DIR=/app/test-results
ENV JEST_JUNIT_OUTPUT_NAME=junit.xml

# Install CI reporter
RUN npm install --no-save jest-junit

# Run tests with CI reporter
CMD ["npx", "jest", "--ci", "--reporters=default", "--reporters=jest-junit"]