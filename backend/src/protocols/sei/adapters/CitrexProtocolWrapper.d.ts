import { PublicClient, WalletClient } from 'viem';
import { CitrexProtocolAdapter, CitrexPerpetualPosition, CitrexMarketData, CitrexTradingMetrics, CitrexOpenPositionParams, CitrexClosePositionParams, CitrexAdjustPositionParams, CitrexLiquidationInfo, SeiProtocolConfig } from '../types';
import { WalletAddress, TransactionHash, AsyncResult } from '../../../types/portfolio';
export declare class CitrexProtocolWrapper implements CitrexProtocolAdapter {
    private publicClient;
    private walletClient;
    private protocolConfig;
    readonly name = "Citrex";
    readonly version = "1.0.0";
    isInitialized: boolean;
    private config;
    constructor(publicClient: PublicClient, walletClient: WalletClient, protocolConfig: SeiProtocolConfig);
    initialize: () => AsyncResult<void>;
    getPositions: (walletAddress: WalletAddress) => AsyncResult<CitrexPerpetualPosition[]>;
    getPosition: (positionId: string) => AsyncResult<CitrexPerpetualPosition>;
    getTradingMetrics: (walletAddress: WalletAddress) => AsyncResult<CitrexTradingMetrics>;
    getMarketData: (market?: string) => AsyncResult<CitrexMarketData[]>;
    getMarkPrice: (market: string) => AsyncResult<number>;
    getFundingRate: (market: string) => AsyncResult<number>;
    openPosition: (params: CitrexOpenPositionParams) => AsyncResult<TransactionHash>;
    closePosition: (params: CitrexClosePositionParams) => AsyncResult<TransactionHash>;
    adjustPosition: (params: CitrexAdjustPositionParams) => AsyncResult<TransactionHash>;
    getLiquidationInfo: (positionId: string) => AsyncResult<CitrexLiquidationInfo>;
    calculateLiquidationPrice: (params: {
        side: "long" | "short";
        entryPrice: number;
        leverage: number;
        maintenanceMargin: number;
    }) => AsyncResult<number>;
    calculateUnrealizedPnL: (positionId: string, markPrice?: number) => AsyncResult<number>;
    calculateFundingPayment: (positionId: string) => AsyncResult<number>;
    cancelOrder: (orderId: string) => AsyncResult<TransactionHash>;
    cancelAllOrders: (walletAddress: WalletAddress, market?: string) => AsyncResult<TransactionHash>;
    private verifyContractDeployments;
    private initializeMarketData;
    private getUserPositionIds;
    private fetchPositionData;
    private fetchMarketData;
    private fetchHistoricalTradingData;
    private calculatePositionPnL;
    private calculateLiquidationInfo;
    private estimateTimeToLiquidation;
    private calculateLiquidationRisk;
    private validateOpenPositionParams;
    private validateAdjustPositionParams;
    private performRiskCheck;
    private executeOpenPosition;
    private executeClosePosition;
    private executeAdjustPosition;
    private simulateTransaction;
    private formatNumber;
}
export declare const createCitrexProtocolWrapper: (publicClient: PublicClient, walletClient: WalletClient, config: SeiProtocolConfig) => CitrexProtocolWrapper;
