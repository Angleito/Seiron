# Docker Compose configuration for test environment
# Provides isolated test runner with Redis and coverage reporting

version: '3.8'

services:
  # ============================================
  # Test Runner Service
  # ============================================
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
      args:
        NODE_VERSION: 20-alpine
    container_name: sei-portfolio-test-runner
    environment:
      # Node environment
      - NODE_ENV=test
      - NODE_OPTIONS=--max-old-space-size=4096
      
      # Test configuration
      - CI=true
      - FORCE_COLOR=1
      
      # Redis configuration
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
      - REDIS_DB=0
      
      # API configuration
      - PORT=0
      - HOST=0.0.0.0
      
      # External services (mocked in tests)
      - OPENAI_API_KEY=test-api-key
      - SEI_RPC_URL=http://localhost:8545
      
      # Security
      - JWT_SECRET=test-jwt-secret-not-for-production
      
      # Test-specific settings
      - TEST_TIMEOUT=30000
      - JEST_WORKER_ID=1
    volumes:
      # Source code
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./jest.config.js:/app/jest.config.js:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      
      # Coverage reports
      - ./coverage:/app/coverage
      
      # Test results
      - ./test-results:/app/test-results
      
      # Exclude node_modules
      - /app/node_modules
    depends_on:
      redis-test:
        condition: service_healthy
    networks:
      - sei-test-network
    command: ["npm", "test"]

  # ============================================
  # Test-specific commands
  # ============================================
  test-unit:
    extends: test-runner
    command: ["npm", "run", "test:unit"]
    profiles:
      - unit

  test-integration:
    extends: test-runner
    command: ["npm", "run", "test:integration"]
    profiles:
      - integration

  test-property:
    extends: test-runner
    command: ["npm", "run", "test:property"]
    profiles:
      - property

  test-coverage:
    extends: test-runner
    command: ["npm", "run", "test:coverage"]
    profiles:
      - coverage

  test-watch:
    extends: test-runner
    command: ["npm", "run", "test:watch"]
    volumes:
      # Allow write access for watch mode
      - ./src:/app/src
      - ./tests:/app/tests
    profiles:
      - watch

  # ============================================
  # Redis Test Instance
  # ============================================
  redis-test:
    image: redis:7-alpine
    container_name: sei-portfolio-redis-test
    command: >
      redis-server
      --appendonly no
      --save ""
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    networks:
      - sei-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    tmpfs:
      - /data

  # ============================================
  # Coverage Report Server (Optional)
  # ============================================
  coverage-server:
    image: nginx:alpine
    container_name: sei-portfolio-coverage-server
    ports:
      - "8080:80"
    volumes:
      - ./coverage/lcov-report:/usr/share/nginx/html:ro
      - ./docker/nginx/coverage.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - sei-test-network
    profiles:
      - coverage-ui
    depends_on:
      test-coverage:
        condition: service_completed_successfully

# ============================================
# Networks
# ============================================
networks:
  sei-test-network:
    driver: bridge
    name: sei-portfolio-test
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================
# Volumes
# ============================================
volumes:
  test-cache:
    name: sei-portfolio-test-cache
    driver: local