# Conversation Tester for E2E Testing
# Simulates realistic user conversations and measures performance

FROM node:18-alpine

RUN apk add --no-cache curl bash

WORKDIR /app

# Install dependencies
RUN npm init -y && npm install \
  axios@^1.6.0 \
  ws@^8.14.2 \
  uuid@^9.0.1 \
  lodash@^4.17.21 \
  chalk@^5.3.0

# Create conversation tester script
RUN cat > /app/conversation-tester.js << 'EOF'
const axios = require('axios');
const WebSocket = require('ws');
const { v4: uuidv4 } = require('uuid');
const _ = require('lodash');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');

class ConversationTester {
  constructor(config) {
    this.config = config;
    this.results = {
      totalConversations: 0,
      successfulConversations: 0,
      failedConversations: 0,
      averageResponseTime: 0,
      memoryPersistenceTests: 0,
      memoryPersistenceSuccess: 0,
      performanceMetrics: [],
      conversationLogs: []
    };
    this.activeConversations = new Map();
  }

  async loadScenarios() {
    const scenariosPath = path.join('/app/fixtures', 'conversation-scenarios.json');
    const scenarios = JSON.parse(fs.readFileSync(scenariosPath, 'utf8'));
    console.log(chalk.green(`Loaded ${scenarios.length} conversation scenarios`));
    return scenarios;
  }

  async loadTestUsers() {
    const usersPath = path.join('/app/fixtures', 'test-users.json');
    const users = JSON.parse(fs.readFileSync(usersPath, 'utf8'));
    console.log(chalk.green(`Loaded ${users.length} test users`));
    return users;
  }

  async startConversation(user, scenario) {
    const conversationId = uuidv4();
    const startTime = Date.now();
    
    console.log(chalk.blue(`Starting conversation ${conversationId} for user ${user.userId}`));
    
    try {
      const conversation = {
        id: conversationId,
        userId: user.userId,
        scenario: scenario.id,
        startTime,
        turns: []
      };
      
      this.activeConversations.set(conversationId, conversation);
      
      // Process each turn in the scenario
      for (const [index, turn] of scenario.turns.entries()) {
        const turnStartTime = Date.now();
        
        const response = await this.sendMessage(conversationId, turn.input, user);
        
        const turnEndTime = Date.now();
        const turnDuration = turnEndTime - turnStartTime;
        
        conversation.turns.push({
          index,
          input: turn.input,
          response: response.data,
          duration: turnDuration,
          timestamp: new Date().toISOString(),
          success: response.status === 200
        });
        
        // Validate response
        if (turn.expectedIntent) {
          const intentMatch = this.validateIntent(response.data, turn.expectedIntent);
          if (!intentMatch) {
            console.log(chalk.yellow(`Intent mismatch in turn ${index}: expected ${turn.expectedIntent}`));
          }
        }
        
        // Add delay between turns to simulate human behavior
        await this.sleep(_.random(500, 2000));
      }
      
      const endTime = Date.now();
      conversation.endTime = endTime;
      conversation.totalDuration = endTime - startTime;
      conversation.success = true;
      
      this.results.totalConversations++;
      this.results.successfulConversations++;
      
      console.log(chalk.green(`Completed conversation ${conversationId} in ${conversation.totalDuration}ms`));
      
      return conversation;
      
    } catch (error) {
      console.error(chalk.red(`Failed conversation ${conversationId}:`, error.message));
      
      const conversation = this.activeConversations.get(conversationId);
      if (conversation) {
        conversation.error = error.message;
        conversation.success = false;
        conversation.endTime = Date.now();
        conversation.totalDuration = conversation.endTime - conversation.startTime;
      }
      
      this.results.totalConversations++;
      this.results.failedConversations++;
      
      return conversation;
    } finally {
      this.activeConversations.delete(conversationId);
    }
  }

  async sendMessage(conversationId, message, user) {
    const url = `${this.config.apiUrl}/api/chat`;
    
    const payload = {
      message,
      userId: user.userId,
      conversationId,
      context: {
        walletAddress: user.walletAddress,
        preferences: user.preferences
      }
    };
    
    const response = await axios.post(url, payload, {
      timeout: this.config.conversationTimeout,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'E2E-Conversation-Tester'
      }
    });
    
    return response;
  }

  validateIntent(response, expectedIntent) {
    // Simple intent validation logic
    if (response.intent && response.intent.toLowerCase() === expectedIntent.toLowerCase()) {
      return true;
    }
    
    // Check for intent in response message
    const responseText = response.message || response.response || '';
    return responseText.toLowerCase().includes(expectedIntent.toLowerCase());
  }

  async testMemoryPersistence(user, scenario) {
    console.log(chalk.blue(`Testing memory persistence for user ${user.userId}`));
    
    try {
      // Start first conversation
      const conversation1 = await this.startConversation(user, scenario);
      
      // Wait a bit to simulate time passing
      await this.sleep(2000);
      
      // Start second conversation with same user
      const conversation2 = await this.startConversation(user, scenario);
      
      // Verify memory persistence
      const memoryPersisted = this.validateMemoryPersistence(conversation1, conversation2);
      
      this.results.memoryPersistenceTests++;
      if (memoryPersisted) {
        this.results.memoryPersistenceSuccess++;
        console.log(chalk.green(`Memory persistence test passed for user ${user.userId}`));
      } else {
        console.log(chalk.yellow(`Memory persistence test failed for user ${user.userId}`));
      }
      
      return memoryPersisted;
      
    } catch (error) {
      console.error(chalk.red(`Memory persistence test error for user ${user.userId}:`, error.message));
      this.results.memoryPersistenceTests++;
      return false;
    }
  }

  validateMemoryPersistence(conversation1, conversation2) {
    // Check if user preferences are maintained
    if (conversation1.success && conversation2.success) {
      // Simple check - both conversations should have similar response patterns
      return conversation1.turns.length > 0 && conversation2.turns.length > 0;
    }
    return false;
  }

  async runConcurrentTest(concurrentUsers, duration) {
    console.log(chalk.blue(`Starting concurrent test with ${concurrentUsers} users for ${duration}ms`));
    
    const scenarios = await this.loadScenarios();
    const users = await this.loadTestUsers();
    
    const startTime = Date.now();
    const promises = [];
    
    // Create concurrent conversations
    for (let i = 0; i < concurrentUsers; i++) {
      const user = users[i % users.length];
      const scenario = scenarios[i % scenarios.length];
      
      // Stagger the start times slightly
      const delay = (i * 100) % 2000;
      
      const promise = this.sleep(delay).then(() => {
        return this.startConversation(user, scenario);
      });
      
      promises.push(promise);
    }
    
    // Wait for all conversations to complete or timeout
    const results = await Promise.allSettled(promises);
    
    const endTime = Date.now();
    const totalDuration = endTime - startTime;
    
    console.log(chalk.green(`Concurrent test completed in ${totalDuration}ms`));
    
    // Analyze results
    const successful = results.filter(r => r.status === 'fulfilled' && r.value.success).length;
    const failed = results.filter(r => r.status === 'rejected' || !r.value.success).length;
    
    console.log(chalk.blue(`Concurrent test results: ${successful} successful, ${failed} failed`));
    
    return {
      totalUsers: concurrentUsers,
      successful,
      failed,
      duration: totalDuration,
      throughput: (successful / totalDuration) * 1000 // conversations per second
    };
  }

  async runPerformanceTest() {
    console.log(chalk.blue('Starting performance test...'));
    
    const scenarios = await this.loadScenarios();
    const users = await this.loadTestUsers();
    
    const performanceResults = [];
    
    // Test different conversation types
    for (const scenario of scenarios) {
      const user = users[0]; // Use first user for consistency
      
      const startTime = Date.now();
      const conversation = await this.startConversation(user, scenario);
      const endTime = Date.now();
      
      const result = {
        scenarioId: scenario.id,
        scenarioName: scenario.name,
        success: conversation.success,
        duration: endTime - startTime,
        turns: conversation.turns.length,
        averageTurnTime: conversation.turns.reduce((sum, turn) => sum + turn.duration, 0) / conversation.turns.length,
        timestamp: new Date().toISOString()
      };
      
      performanceResults.push(result);
      
      console.log(chalk.green(`Performance test for ${scenario.name}: ${result.duration}ms`));
    }
    
    return performanceResults;
  }

  async sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async saveResults() {
    const resultsPath = path.join('/app/results', 'conversation-test-results.json');
    
    // Calculate average response time
    const totalResponseTime = this.results.performanceMetrics.reduce((sum, metric) => sum + metric.duration, 0);
    this.results.averageResponseTime = totalResponseTime / this.results.performanceMetrics.length || 0;
    
    // Add timestamp and summary
    this.results.timestamp = new Date().toISOString();
    this.results.summary = {
      successRate: this.results.successfulConversations / this.results.totalConversations,
      memoryPersistenceRate: this.results.memoryPersistenceSuccess / this.results.memoryPersistenceTests,
      averageResponseTime: this.results.averageResponseTime
    };
    
    fs.writeFileSync(resultsPath, JSON.stringify(this.results, null, 2));
    console.log(chalk.green(`Results saved to ${resultsPath}`));
  }

  async run() {
    console.log(chalk.blue('Starting E2E Conversation Testing...'));
    
    try {
      // Load test data
      const scenarios = await this.loadScenarios();
      const users = await this.loadTestUsers();
      
      // Run performance tests
      const performanceResults = await this.runPerformanceTest();
      this.results.performanceMetrics = performanceResults;
      
      // Run memory persistence tests
      for (const user of users) {
        const scenario = scenarios[0]; // Use first scenario for consistency
        await this.testMemoryPersistence(user, scenario);
      }
      
      // Run concurrent test
      const concurrentResults = await this.runConcurrentTest(
        this.config.concurrentUsers,
        this.config.duration
      );
      
      this.results.concurrentTest = concurrentResults;
      
      // Save results
      await this.saveResults();
      
      console.log(chalk.green('E2E Conversation Testing completed successfully!'));
      
    } catch (error) {
      console.error(chalk.red('E2E Conversation Testing failed:', error));
      throw error;
    }
  }
}

// Main execution
const config = {
  apiUrl: process.env.API_URL || 'http://localhost:3001',
  concurrentUsers: parseInt(process.env.CONCURRENT_USERS || '10'),
  duration: parseInt(process.env.TEST_DURATION || '300000'),
  conversationTimeout: parseInt(process.env.CONVERSATION_TIMEOUT || '30000')
};

const tester = new ConversationTester(config);
tester.run().catch(console.error);
EOF

# Create health check script
RUN cat > /app/health-check.sh << 'EOF'
#!/bin/bash
echo "Conversation Tester Health Check"
exit 0
EOF

RUN chmod +x /app/health-check.sh

EXPOSE 8080

CMD ["node", "/app/conversation-tester.js"]