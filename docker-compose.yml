services:
  # Redis for L2 cache
  redis:
    image: redis:7-alpine
    container_name: seiron-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: seiron-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - API_PORT=3001
      - REDIS_URL=redis://redis:6379
      - SEI_RPC_URL=${SEI_RPC_URL:-https://evm-rpc.sei-apis.com}
      - WALLET_ADDRESS=${WALLET_ADDRESS}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - DEBUG=seiron:*
    volumes:
      - ./cache:/app/cache
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    # Command is defined in Dockerfile

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: seiron-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://backend:3001
      - VITE_WS_URL=ws://backend:3001
      - VITE_PRIVY_APP_ID=${VITE_PRIVY_APP_ID}
      - VITE_PRIVY_CLIENT_ID=${VITE_PRIVY_CLIENT_ID}
      - VITE_WALLETCONNECT_PROJECT_ID=${VITE_WALLETCONNECT_PROJECT_ID}
      - VITE_SEI_RPC_URL=${VITE_SEI_RPC_URL:-https://evm-rpc.sei-apis.com}
      - VITE_ORCHESTRATOR_API=http://backend:3001
      - VITE_ORCHESTRATOR_WS=ws://backend:3001
      - VITE_ELEVENLABS_API_KEY=${VITE_ELEVENLABS_API_KEY}
      - VITE_ELEVENLABS_VOICE_ID=${VITE_ELEVENLABS_VOICE_ID}
      - VITE_VOICE_ENABLED=${VITE_VOICE_ENABLED:-true}
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: seiron-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    depends_on:
      - backend
    restart: unless-stopped

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: seiron-grafana
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: seiron-network