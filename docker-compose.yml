services:
  # Redis for L2 cache
  redis:
    image: redis:7-alpine
    container_name: seiron-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./logs/redis:/var/log/redis
    command: redis-server --save 60 1 --loglevel notice --logfile /var/log/redis/redis.log
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-warning}
      - REDIS_LOG_LEVEL=${REDIS_LOG_LEVEL:-warning}
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=redis,env=production"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: seiron-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - API_PORT=3001
      - REDIS_URL=redis://redis:6379
      - SEI_RPC_URL=${SEI_RPC_URL:-https://evm-rpc.sei-apis.com}
      - WALLET_ADDRESS=${WALLET_ADDRESS}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEBUG=${DEBUG:-seiron:*}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - LOG_RETENTION_DAYS=${LOG_RETENTION_DAYS:-30}
      - ENABLE_PERFORMANCE_MONITORING=${ENABLE_PERFORMANCE_MONITORING:-true}
      - ENABLE_HEALTH_CHECK_LOGGING=${ENABLE_HEALTH_CHECK_LOGGING:-true}
    volumes:
      - ./cache:/app/cache
      - ./logs:/app/logs
      - ./logs/backend:/app/logs/backend
    depends_on:
      redis:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "10"
        labels: "service=backend,env=production"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    # Command is defined in Dockerfile

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: seiron-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://seiron-git-dev-angleitos-projects.vercel.app
      - VITE_WS_URL=wss://seiron-git-dev-angleitos-projects.vercel.app
      - VITE_PRIVY_APP_ID=${VITE_PRIVY_APP_ID}
      - VITE_PRIVY_CLIENT_ID=${VITE_PRIVY_CLIENT_ID}
      - VITE_WALLETCONNECT_PROJECT_ID=${VITE_WALLETCONNECT_PROJECT_ID}
      - VITE_SEI_RPC_URL=${VITE_SEI_RPC_URL:-https://evm-rpc.sei-apis.com}
      - VITE_ORCHESTRATOR_API=https://seiron-git-dev-angleitos-projects.vercel.app
      - VITE_ORCHESTRATOR_WS=wss://seiron-git-dev-angleitos-projects.vercel.app
      - ORCHESTRATOR_ENDPOINT=https://seiron-git-dev-angleitos-projects.vercel.app
      - ORCHESTRATOR_WS_ENDPOINT=wss://seiron-git-dev-angleitos-projects.vercel.app
      - VITE_ELEVENLABS_API_KEY=${VITE_ELEVENLABS_API_KEY}
      - VITE_ELEVENLABS_VOICE_ID=${VITE_ELEVENLABS_VOICE_ID}
      - VITE_VOICE_ENABLED=${VITE_VOICE_ENABLED:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEBUG=${DEBUG:-false}
      - ENABLE_PERFORMANCE_MONITORING=${ENABLE_PERFORMANCE_MONITORING:-true}
    volumes:
      - ./logs/frontend:/app/logs
    logging:
      driver: json-file
      options:
        max-size: "15m"
        max-file: "8"
        labels: "service=frontend,env=production"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: seiron-prometheus
    ports:
      - "9090:9090"
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_LOG_LEVEL=${PROMETHEUS_LOG_LEVEL:-info}
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
      - ./logs/prometheus:/prometheus/logs
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--log.level=${PROMETHEUS_LOG_LEVEL:-info}'
      - '--log.format=json'
    depends_on:
      - backend
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=prometheus,env=production"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: seiron-grafana
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_LOG_LEVEL=${LOG_LEVEL:-info}
      - GF_LOG_MODE=console,file
      - GF_PATHS_LOGS=/var/log/grafana
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./logs/grafana:/var/log/grafana
    depends_on:
      - prometheus
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=grafana,env=production"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Log aggregation service (disabled for now - optional)
  # log-aggregator:
  #   image: fluent/fluent-bit:latest
  #   container_name: seiron-log-aggregator
  #   volumes:
  #     - ./logs:/fluent-bit/logs
  #     - ./docker/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
  #     - ./docker/fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   environment:
  #     - LOG_LEVEL=${LOG_LEVEL:-info}
  #     - FLUENT_BIT_LOG_LEVEL=${FLUENT_BIT_LOG_LEVEL:-info}
  #   depends_on:
  #     - backend
  #     - frontend
  #     - redis
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: "5m"
  #       max-file: "3"
  #       labels: "service=log-aggregator,env=production"
  #   restart: unless-stopped

  # Log monitoring and alerting (disabled for now - optional)
  # log-monitor:
  #   image: alpine:latest
  #   container_name: seiron-log-monitor
  #   volumes:
  #     - ./logs:/logs:ro
  #     - ./scripts/log-monitor.sh:/usr/local/bin/log-monitor.sh
  #   environment:
  #     - LOG_LEVEL=${LOG_LEVEL:-info}
  #     - LOG_RETENTION_DAYS=${LOG_RETENTION_DAYS:-30}
  #     - LOG_ALERT_THRESHOLD=${LOG_ALERT_THRESHOLD:-100}
  #   command: ["/usr/local/bin/log-monitor.sh"]
  #   depends_on:
  #     - log-aggregator
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: "5m"
  #       max-file: "3"
  #       labels: "service=log-monitor,env=production"
  #   restart: unless-stopped

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  log-data:
    driver: local
    driver_opts:
      type: none
      device: ./logs
      o: bind

networks:
  default:
    name: seiron-network